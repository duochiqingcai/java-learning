数组Array是一种线性表数据结构。用一组连续的内存空间，来存储一组相同类型的数据。
解析：
1.线性表：指数据排成一条线的结构，每个线性表的数据最多只有前和后两个方向；另外，链表、队列、栈也是线性表结构。
  非线性表：如二叉树、堆、图，非线性表中，数据之间不是简单的前后关系。

2.连续的内存空间和相同类型的数据；以为这两个限制，数组具有
    a."随机访问"的特性(可以理解为任意访问);
    如何实现下标随机访问数组元素呢？
    answer：因为数组内存是连续的，所以可以通过寻址公式计算出元素存储的内存地址：
    a[i]_address = base_address + i*data_type_size
    data_type_size指数组中每个元素的大小，比如存储的是int类型，所以data_type_size为4个字节；

    b.让数组的操作变得低效，及删除、插入数据难，因为需要做大量的数据搬移工作，平均情况时间复杂度为O(n);
    (注：数组的查找时间复杂度不为O(1),即使排好序的数组，使用二分查找，时间复杂度也为O(logn);所以，正确表述为，数组支持随机访问，根据小标随机访问的时间复杂度为O(1));

需要注意：
1.数组的访问越界问题，即ArrayIndexOutOfBoundsException
2.为什么数组从下标0开始编号？
    从数组存储的内存模型看，“下标”最确切的定义应该是“偏移(offset)”。比如用a代表数组的首地址，a[0]表示偏移为0的位置，即首地址；a[k]表示
    偏移k个type_size的位置，所以计算a[k]的内存地址为：a[k]_address = base_address +k*type_size

数组的默认值：
1、int类型定义的数组，初始化默认是0

2、String类型定义的数组，默认值是null

3、char类型定义的数组，默认值是0对应的字符

4、double类型定义的数组，默认值是0.0

5、float类型定义的数组，默认值是0.0