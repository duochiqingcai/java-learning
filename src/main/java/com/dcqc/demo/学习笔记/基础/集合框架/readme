1.ArrayList 和 LinkedList的异同
    a.线程是否安全：两者均是不同步的，线程不安全。
    b.底层数据结构：ArrayList底层是Object数组；LinkedList底层是双向链表
    c.插入和删除是否受元素位置的影响：
        1.ArrayList底层为数组，所以插入和删除时间复杂度受元素位置影响，为O(n);
        2.LinkedList底层为链表，不受影响，插入和删除时间复杂度为O(1);
    d.是否支持快速随机访问：
        ArrayList支持随机访问，LinkedList不支持。
    e.占用内存空间：
        ArrayList的空 间浪费主要体现在在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗
        比ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据）

2.ArrayList 与 Vector 区别
    Vector线程安全，消耗时间多；ArrayList线程不安全。

3.HashMap的特性
    a.线程是否安全：HashMap线程不安全(若想要线程安全，可使用ConcurrentHashMap)
    b.底层数据结构：
        在JDK1.8之前，HashMap底层是数组和链表组合使用，即链表散列。HashMap通过key的hashCode经过扰动函数处理后得到hash值，然后通过
    (n-1)&hash判断当前元素存放的位置(这里的 n 指的是数组的长度),如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key
    是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。
        所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的hashCode() 方法 换句话说使用
    扰动函数之后可以减少碰撞。
        在JDK1.8之后，HashMap底层是数组+链表+红黑树(链表长度大于8时转换为红黑树)。

4.HashMap和HashTable的区别
    a.线程是否安全：HashMap线程不安全，HashTable线程安全；HashTable 内部的方法基本都经过synchronized 修饰。（如果你要保证线程安全的话
    就使用 ConcurrentHashMap 吧！）
    b.底层数据结构： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少
    搜索时间。Hashtable 没有这样的机制。
    b.效率：因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；
    c.对Null key 和Null value的支持： HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。。但是在
    HashTable 中 put 进的键值只要有一个 null，直接抛出 NullPointerException。
    d.初始容量大小和每次扩充容量大小的不同 ： ①创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。
    HashMap 默认的初始化大小（数组大小）为16（必须是2的次幂）。之后每次扩充，容量变为原来的2倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，
    而 HashMap 会将其扩充为2的幂次方大小（HashMap 中的 tableSizeFor() 方法保证，下面给出了源代码）。也就是说 HashMap 总是使用2的幂
    作为哈希表的大小.