HashMap个人理解:
1.底层结构（查看文件夹内图片）
    HashMap的底层由数组和链表组成，JDK1.8之后，当链表的长度大于8之后，会将链表转化为红黑树（个人了解不多）；
    a.首先说数组；
        在HashMap中，数组中保存Entry<K,V>形式的元素(Entry是Map.Entry，可以查看HashMap源码)，key的值是通过hash函数计算后得到的hash值，
    对应数组的下标。
    b.然后是链表；
        由于没有完美的hash函数可以避免hash冲突，所以即便是不同key值也有可能得到相同的hash值，即两个元素可能会存储到同一个下标的数组中，对
    于这种情况，HashMap采用链表形式进行存储,个人认为HashMap中的链表形式是单链表（查看HashMap中的Node得出）；


2.线程是否安全
    HashMap是线程不安全的。
    因为HashMap的扩容机制，查看HashMap源码resize()了解一下；
    在多线程下，进行 put 操作会导致 HashMap 死循环(死链)，原因在于 HashMap 的扩容 resize()方法。由于扩容是新建一
    个数组，复制原数据到数组。由于数组下标挂有链表，所以需要复制链表，但是多线程操作有可能导致环形链表。
    注意：jdk1.8已经解决了死循环(死链)的问题

3.时间复杂度（纯属个人观点）
    a.完美情况（即没有hash冲突的情况发生）
    查找：O(1)  因为底层是数组
    添加：O(1)
    删除：O(1)
    b.如果定位到数组中的链表（发生hash冲突），最坏情况时间复杂度
    查找：O(n)
    添加：O(1),默认对象不同，如果要遍历比较对象是否相同，为O(n)
    删除：O(1)

4.容量的初始化
    HashMap的实例有两个参数影响其性能：初始容量和加载因子。另外HashMap在扩充时会扩充为2的幂次方大小。

    容量是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。 加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。
    HashMap初始容量是16（指数组大小），默认加载因子是0.75。

    所以，HashMap初始化容量建议为 initialCapacity = (需要存储的元素个数 / 负载因子) + 1，比如有1000个元素，可以为(1000/0.75)+1=1251;
    如果无法确定初始化大小，请设置为16(即默认值)。注：此处摘自阿里巴巴Java开发手册。

4.
