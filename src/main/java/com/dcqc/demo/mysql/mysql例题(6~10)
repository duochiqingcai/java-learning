6. NOT IN  或者  LEFT JOIN...ON  + IS NULL
eg：购物网站有两张表，customers 和orders。编写sql查询，找出从不订购东西的客户。

customers表：
+----+-------+
| Id | Name  |
+----+-------+
| 1  | Joe   |
| 2  | Henry |
| 3  | Sam   |
| 4  | Max   |
+----+-------+

orders表：
+----+------------+
| Id | CustomerId |
+----+------------+
| 1  | 3          |
| 2  | 1          |
+----+------------+

期望结果：
+-----------+
| Customers |
+-----------+
| Henry     |
| Max       |
+-----------+


方法一：使用NOT IN 查询不在列表中的客户
SELECT C.name AS 'Customers'
FROM customers AS C
WHERE C.Id NOT IN
(
    SELECT customerId FROM orders
);

方法二：使用LEFT JOIN...ON + IS NULL查询
SELECT C.Name AS Customers
FROM Customers AS C
LEFT JOIN Orders O
ON C.Id = O.CustomerId
WHERE O.CustomerId IS NULL
----------------------------------------------------------分割线---------------------------------------------------------

7.删除操作   DELETE(...)FROM...WHERE...
eg：编写一个 SQL 查询，来删除 Person 表中所有重复的电子邮箱，重复的邮箱里只保留 Id 最小 的那个。

person表：
+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
| 3  | john@example.com |
+----+------------------+
Id 是这个表的主键。

期望结果：
+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
+----+------------------+

方法：先删除重复且id大的数据，然后查询。

DELETE P1 FROM person AS P1,person AS P2
WHERE P1.Email = P2.Email AND P1.Id > P2.Id;

SELECT *
FROM person;
----------------------------------------------------------分割线---------------------------------------------------------

8.日期比较 DATEIFF...+INNER...JOIN ON
eg:给定一个 Weather 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。

weather表：
+---------+------------------+------------------+
| Id(INT) | RecordDate(DATE) | Temperature(INT) |
+---------+------------------+------------------+
|       1 |       2015-01-01 |               10 |
|       2 |       2015-01-02 |               25 |
|       3 |       2015-01-03 |               20 |
|       4 |       2015-01-04 |               30 |
+---------+------------------+------------------+

期望结果：
+----+
| Id |
+----+
|  2 |
|  4 |
+----+

方法：使用DATEIFF函数，获得两个日期的天数差集，然后连接查询

SELECT
    weather.id AS 'Id'
FROM
    weather
    JOIN
    weather w ON DATEDIFF(weather.RecordDate, w.RecordDate) = 1
        AND weather.Temperature > w.Temperature
;
----------------------------------------------------------分割线---------------------------------------------------------

9.条件查询，去重复
eg：有一个courses 表 ，有: student (学生) 和 class (课程)。请列出所有超过或等于5名学生的课。

courses表：
+---------+------------+
| student | class      |
+---------+------------+
| A       | Math       |
| B       | English    |
| C       | Math       |
| D       | Biology    |
| E       | Math       |
| F       | Computer   |
| G       | Math       |
| H       | Math       |
| I       | Math       |
+---------+------------+
Note:
学生在每个课中不应被重复计算。

期望输出：
+---------+
| class   |
+---------+
| Math    |
+---------+

方法：GROUP BY + HAVING  +COUNT, DISTINCT用于去重。
SELECT class
FROM courses
GROUP BY class
HAVING COUNT(DISTINCT student)>=5
;
----------------------------------------------------------分割线---------------------------------------------------------

10.条件查询  ORDER...BY排序
eg：编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。
employee表：
+----+--------+
| Id | Salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+

例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。

期望结果：
+---------------------+
| SecondHighestSalary |
+---------------------+
| 200                 |
+---------------------+

方法一：子查询+LIMIT子句；将不同的薪资按降序排序，然后使用 LIMIT 子句获得第二高的薪资。
SELECT
    (SELECT DISTINCT
            Salary
        FROM
            Employee
        ORDER BY Salary DESC
        LIMIT 1 OFFSET 1) AS SecondHighestSalary
;

方法二：使用 IFNULL 和 LIMIT 子句；解决 “NULL” 问题的另一种方法是使用 “IFNULL” 函数
SELECT
    IFNULL(
      (SELECT DISTINCT Salary
       FROM Employee
       ORDER BY Salary DESC
       LIMIT 1 OFFSET 1),
    NULL) AS SecondHighestSalary
;
----------------------------------------------------------分割线---------------------------------------------------------